com.badran.bluetoothcontroller.BluetoothConnection -> com.badran.bluetoothcontroller.BluetoothConnection:
    int id -> id
    boolean WillRead -> a
    boolean WillSend -> b
    boolean isConnected -> c
    boolean isSizePacketized -> d
    boolean isEndBytePacketized -> e
    byte packetEndByte -> a
    int packetSize -> a
    android.bluetooth.BluetoothSocket socket -> a
    java.io.OutputStream outStream -> a
    java.io.BufferedOutputStream bufferedOutputStream -> a
    java.io.InputStream inputStream -> a
    int readingThreadID -> b
    java.util.Map map -> map
    java.util.Map mapAddress -> a
    java.lang.String name -> name
    java.lang.String mac -> a
    java.lang.String SPP_UUID -> b
    android.bluetooth.BluetoothDevice device -> a
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode connectionMode -> a
    boolean isBufferDynamic -> f
    int bufferSize -> c
    int getConnectionMode() -> getConnectionMode
    void <init>(int) -> <init>
    void <init>() -> <init>
    void enableReading(int) -> enableReading
    void disableReading() -> disableReading
    void enableSending() -> enableSending
    void disableSending() -> disableSending
    boolean isReading() -> isReading
    byte[] read(int) -> read
    byte[] readAllPackets() -> readAllPackets
    void setPacketSize(int) -> setPacketSize
    void setEndByte(byte) -> setEndByte
    boolean isDataAvailable() -> isDataAvailable
    byte[] read() -> read
    void normal_connect(boolean,boolean) -> normal_connect
    void connect(int,int,boolean) -> connect
    void brutal_connect(int,int,boolean) -> brutal_connect
    void reset() -> reset
    void close() -> close
    void closeAll() -> a
    void setID(int) -> setID
    int getID() -> getID
    void setUUID(java.lang.String) -> setUUID
    void setMac(java.lang.String) -> setMac
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    java.lang.String getAddress() -> getAddress
    void sendString(java.lang.String) -> sendString
    java.lang.String sendChar(byte) -> sendChar
    void setBufferSize(int) -> setBufferSize
    void sendBytes(byte[]) -> sendBytes
    void sendBytes_Blocking(byte[],com.badran.bluetoothcontroller.BluetoothConnection) -> sendBytes_Blocking
    void initializeStreams() -> b
    boolean startDiscovery() -> startDiscovery
    void instanceRemoved() -> instanceRemoved
    com.badran.bluetoothcontroller.BluetoothConnection getInstFromDevice(android.bluetooth.BluetoothDevice) -> a
    void setDevice(android.bluetooth.BluetoothDevice) -> a
    void setSucket(android.bluetooth.BluetoothSocket) -> a
    void removeSocketServer() -> c
    void RaiseCONNECTED() -> d
    void RaiseDISCONNECTED() -> e
    void RaiseNOT_FOUND() -> f
    void RaiseMODULE_OFF() -> g
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode -> com.badran.bluetoothcontroller.a:
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode UsingMac -> b
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode UsingName -> c
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode UsingBluetoothDeviceReference -> d
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode UsingSocket -> e
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode NotSet -> f
    int value -> value
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode[] $VALUES -> a
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode[] values() -> values
    com.badran.bluetoothcontroller.BluetoothConnection$ConnectionMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.Bridge -> com.badran.bluetoothcontroller.Bridge:
    android.bluetooth.BluetoothAdapter mBluetoothAdapter -> a
    com.badran.bluetoothcontroller.Bridge instance -> a
    com.badran.bluetoothcontroller.Bridge$BtStateReceiver btStateReceiver -> a
    com.badran.bluetoothcontroller.Bridge$BluetoothDevicePickerReceiver mBluetoothPickerReceiver -> a
    android.bluetooth.BluetoothDevice PickedBtDevice -> b
    void <init>() -> <init>
    com.badran.bluetoothcontroller.Bridge getInstance() -> getInstance
    java.lang.String test() -> test
    com.badran.bluetoothcontroller.BluetoothConnection createBlutoothConnectionObject(int) -> createBlutoothConnectionObject
    void askEnableBluetooth() -> askEnableBluetooth
    void registerStateReceiver() -> registerStateReceiver
    void deRegisterStateReceiver() -> deRegisterStateReceiver
    boolean enableBluetooth() -> enableBluetooth
    boolean disableBluetooth() -> disableBluetooth
    boolean isBluetoothEnabled() -> isBluetoothEnabled
    void showDevices() -> showDevices
    boolean startDiscovery() -> startDiscovery
    boolean cancelDiscovery() -> cancelDiscovery
    void makeDiscoverable(int) -> makeDiscoverable
    void initServer(java.lang.String,int,boolean) -> initServer
    com.badran.bluetoothcontroller.BluetoothConnection getPickedDevice(int) -> getPickedDevice
    com.badran.bluetoothcontroller.BluetoothConnection getDiscoveredDeviceForServer(int) -> getDiscoveredDeviceForServer
    com.badran.bluetoothcontroller.BluetoothConnection[] getPairedDevices() -> getPairedDevices
    byte[] TEST(byte[]) -> TEST
    void IntToBytes(byte[],int,int) -> a
    void OnDestroy() -> OnDestroy
    android.bluetooth.BluetoothDevice access$202(com.badran.bluetoothcontroller.Bridge,android.bluetooth.BluetoothDevice) -> a
    android.bluetooth.BluetoothDevice access$200(com.badran.bluetoothcontroller.Bridge) -> a
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.Bridge$1 -> com.badran.bluetoothcontroller.b:
    int trialsCount -> d
    int time -> e
    java.util.UUID uuid -> uuid
    boolean willStop -> g
    boolean isNeedDiscovery -> h
    boolean isBrutalConnection -> i
    android.bluetooth.BluetoothDevice device -> a
    com.badran.bluetoothcontroller.BluetoothConnection btConnection -> a
    android.bluetooth.BluetoothSocket socket -> a
    void <init>(com.badran.bluetoothcontroller.BluetoothConnection,int,int,boolean) -> <init>
com.badran.bluetoothcontroller.Bridge$BluetoothDevicePickerReceiver -> com.badran.bluetoothcontroller.c:
    com.badran.bluetoothcontroller.Bridge this$0 -> b
    void <init>(com.badran.bluetoothcontroller.Bridge) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.badran.bluetoothcontroller.Bridge,byte) -> <init>
com.badran.bluetoothcontroller.Bridge$BtStateReceiver -> com.badran.bluetoothcontroller.d:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.badran.bluetoothcontroller.Bridge) -> <init>
com.badran.bluetoothcontroller.BtInterface -> com.badran.bluetoothcontroller.e:
    android.bluetooth.BluetoothAdapter mBluetoothAdapter -> a
    com.badran.bluetoothcontroller.BtInterface$ServerReceiver serverReceiver -> a
    com.badran.bluetoothcontroller.BtInterface$DeviceDiscoveryReceiver deviceDiscoveryReceiver -> a
    com.badran.bluetoothcontroller.BtInterface$RSSI_DiscoveryReceiver rssi_DiscoveryReceiver -> a
    boolean isConnecting -> j
    com.badran.bluetoothcontroller.Bridge$1 btConnectionForDiscovery$4493c120 -> a
    java.util.Queue btConnectionsQueue -> a
    android.util.SparseArray sparseTrials -> a
    java.lang.Object ConnectThreadLock -> a
    com.badran.bluetoothcontroller.BtInterface instance -> a
    java.util.Set AlreadyFoundDevices -> a
    android.content.BroadcastReceiver mReceiver -> a
    com.badran.bluetoothcontroller.BtInterface$AcceptThread acceptThread -> a
    java.lang.Object acceptThreadLock -> b
    void <init>() -> <init>
    com.badran.bluetoothcontroller.BtInterface getInstance() -> a
    void addConnectionTrial$603b49ab(com.badran.bluetoothcontroller.Bridge$1) -> a
    boolean findBluetoothDevice(com.badran.bluetoothcontroller.BluetoothConnection) -> a
    boolean startDiscovery() -> startDiscovery
    boolean cancelDiscovery() -> cancelDiscovery
    void makeDiscoverable(int) -> makeDiscoverable
    void access$100(com.badran.bluetoothcontroller.BtInterface) -> a
    com.badran.bluetoothcontroller.BtInterface$ServerReceiver access$200(com.badran.bluetoothcontroller.BtInterface) -> a
    com.badran.bluetoothcontroller.Bridge$1 access$300$757e9f93(com.badran.bluetoothcontroller.BtInterface) -> a
    java.lang.Object access$400(com.badran.bluetoothcontroller.BtInterface) -> a
    com.badran.bluetoothcontroller.Bridge$1 access$302$2bb87f8d$5608a0db(com.badran.bluetoothcontroller.BtInterface) -> b
    boolean access$502$e4ca90f(com.badran.bluetoothcontroller.BtInterface) -> a
    com.badran.bluetoothcontroller.BtInterface$DeviceDiscoveryReceiver access$600(com.badran.bluetoothcontroller.BtInterface) -> a
    boolean access$700$1918c433(com.badran.bluetoothcontroller.BtInterface,com.badran.bluetoothcontroller.Bridge$1) -> a
    com.badran.bluetoothcontroller.BtInterface$AcceptThread access$902$6ed23eb3(com.badran.bluetoothcontroller.BtInterface) -> a
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BtInterface$1 -> com.badran.bluetoothcontroller.f:
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.badran.bluetoothcontroller.BtInterface$2 -> com.badran.bluetoothcontroller.g:
    int[] $SwitchMap$com$badran$bluetoothcontroller$BluetoothConnection$ConnectionMode -> a
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BtInterface$AcceptThread -> com.badran.bluetoothcontroller.h:
    boolean willStop -> g
    android.bluetooth.BluetoothServerSocket mmServerSocket -> a
    boolean isAccepting -> k
    boolean willConnectOneDevice -> l
    java.util.UUID serverUUID -> a
    int discoverable_Time_Duration -> f
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface,java.util.UUID,int,boolean) -> <init>
    void abortServer() -> h
    android.bluetooth.BluetoothServerSocket createServerSocket() -> a
    void run() -> run
com.badran.bluetoothcontroller.BtInterface$ConnectThread -> com.badran.bluetoothcontroller.i:
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface) -> <init>
    android.bluetooth.BluetoothSocket createSocket$35b2da30(boolean,com.badran.bluetoothcontroller.Bridge$1) -> a
    void run() -> run
    void <init>(com.badran.bluetoothcontroller.BtInterface,byte) -> <init>
com.badran.bluetoothcontroller.BtInterface$DeviceDiscoveryReceiver -> com.badran.bluetoothcontroller.j:
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.badran.bluetoothcontroller.BtInterface$NormalConnectThread -> com.badran.bluetoothcontroller.k:
    android.bluetooth.BluetoothSocket mmSocket -> b
    com.badran.bluetoothcontroller.BluetoothConnection btConnection -> a
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface,com.badran.bluetoothcontroller.BluetoothConnection,java.util.UUID,boolean,boolean) -> <init>
    void run() -> run
com.badran.bluetoothcontroller.BtInterface$RSSI_DiscoveryReceiver -> com.badran.bluetoothcontroller.l:
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.badran.bluetoothcontroller.BtInterface$ServerReceiver -> com.badran.bluetoothcontroller.m:
    com.badran.bluetoothcontroller.BtInterface this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtInterface) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.badran.bluetoothcontroller.BtInterface,byte) -> <init>
com.badran.bluetoothcontroller.BtReader -> com.badran.bluetoothcontroller.n:
    byte[] empty -> a
    com.badran.bluetoothcontroller.BtReader instance -> a
    void <init>() -> <init>
    com.badran.bluetoothcontroller.BtReader getInstance() -> a
    boolean IsReading(com.badran.bluetoothcontroller.BluetoothConnection) -> b
    void EnableReading(com.badran.bluetoothcontroller.BluetoothConnection) -> a
    void packetize(com.badran.bluetoothcontroller.BluetoothConnection,com.badran.bluetoothcontroller.BtReader$BtElement) -> a
    boolean Close(int,int) -> a
    boolean IsDataAvailable(int,int) -> b
    void setPacketSize(int,int,int) -> a
    void setEndByte(int,int,byte) -> a
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BtReader$BtElement -> com.badran.bluetoothcontroller.o:
    boolean isDynamicSize -> m
    android.bluetooth.BluetoothSocket socket -> a
    java.io.InputStream inputStream -> a
    java.lang.Object ReadWriteBufferKey -> c
    int id -> id
    boolean stopReading -> n
    com.badran.library.CircularArrayList buffer -> a
    boolean IsDataAvailable() -> a
    byte[] PollArray(int,int) -> a
    byte[] PollPacket(int) -> a
    byte[] PollAllPackets$255806f() -> a
    void setPacketSize(int) -> setPacketSize
    void setEndByte(byte) -> setEndByte
    int Capacity() -> a
    void Resize() -> i
    boolean AddByte(byte) -> a
    void <init>(android.bluetooth.BluetoothSocket,java.io.InputStream,int,int,boolean) -> <init>
com.badran.bluetoothcontroller.BtReader$BtReceiver -> com.badran.bluetoothcontroller.p:
    com.badran.bluetoothcontroller.BtReader$ReadingThreadData rtd -> a
    void <init>(com.badran.bluetoothcontroller.BtReader$ReadingThreadData) -> <init>
    void run() -> run
com.badran.bluetoothcontroller.BtReader$ReadingThreadData -> com.badran.bluetoothcontroller.q:
    boolean isReading -> o
    int ThreadID -> g
    android.util.SparseArray map -> b
    java.lang.Object key -> d
    com.badran.bluetoothcontroller.BtReader this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtReader,int) -> <init>
    void AddReader(int,com.badran.bluetoothcontroller.BtReader$BtElement) -> a
    com.badran.bluetoothcontroller.BtReader$BtElement GetReader(int) -> a
    com.badran.bluetoothcontroller.BtReader$BtElement GetReaderByIndex(int) -> b
    int NumberOfReaders() -> b
    void RemoveReader(int) -> a
    void StartSingletonThread(com.badran.bluetoothcontroller.BtReader$BtElement) -> a
    void StartThread() -> j
    void DoneReading() -> k
    boolean IsReading() -> b
com.badran.bluetoothcontroller.BtReader$ReadingThreads -> com.badran.bluetoothcontroller.r:
    android.util.SparseArray dictionary -> c
    java.lang.Object key -> d
    void Add(int,com.badran.bluetoothcontroller.BtReader$ReadingThreadData) -> a
    com.badran.bluetoothcontroller.BtReader$ReadingThreadData Get(int) -> a
    void Remove(int) -> b
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BtReader$SingleBtReceiver -> com.badran.bluetoothcontroller.s:
    com.badran.bluetoothcontroller.BtReader$BtElement element -> a
    void <init>(com.badran.bluetoothcontroller.BtReader$BtElement) -> <init>
    void run() -> run
com.badran.bluetoothcontroller.BtSender -> com.badran.bluetoothcontroller.t:
    com.badran.bluetoothcontroller.BtSender instance -> a
    boolean isSending -> p
    java.util.Queue outMessages -> b
    java.lang.Object lock1 -> e
    void <init>() -> <init>
    com.badran.bluetoothcontroller.BtSender getInstance() -> a
    void addJob(java.io.BufferedOutputStream,byte[],com.badran.bluetoothcontroller.BluetoothConnection) -> a
    java.lang.Object access$100(com.badran.bluetoothcontroller.BtSender) -> a
    void <clinit>() -> <clinit>
com.badran.bluetoothcontroller.BtSender$BtSenderThread -> com.badran.bluetoothcontroller.u:
    com.badran.bluetoothcontroller.BtSender this$0 -> b
    void <init>(com.badran.bluetoothcontroller.BtSender) -> <init>
    void run() -> run
    void <init>(com.badran.bluetoothcontroller.BtSender,byte) -> <init>
com.badran.bluetoothcontroller.BtSender$Job -> com.badran.bluetoothcontroller.v:
    byte[] msg -> b
    java.io.BufferedOutputStream bufferedOutputStream -> a
    com.badran.bluetoothcontroller.BluetoothConnection btConnection -> a
    void <init>(java.io.BufferedOutputStream,byte[],com.badran.bluetoothcontroller.BluetoothConnection) -> <init>
com.badran.bluetoothcontroller.PluginToUnity$ControlMessages -> com.badran.bluetoothcontroller.w:
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages CONNECTED -> a
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages DISCONNECTED -> b
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages NOT_FOUND -> c
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages MODULE_OFF -> d
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages SENDING_ERROR -> e
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages READING_ERROR -> f
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages EMPTIED_DATA -> g
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages DATA_AVAILABLE -> h
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages READING_STOPPED -> i
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages READING_STARTED -> j
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages DEVICE_PICKED -> k
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages BLUETOOTH_OFF -> l
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages BLUETOOTH_ON -> m
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages SERVER_DISCOVERED_DEVICE -> n
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages DISCOVERED_DEVICE -> o
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages ACTION_DISCOVERY_FINISHED -> p
    java.lang.String value -> value
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages[] $VALUES -> a
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages[] values() -> values
    com.badran.bluetoothcontroller.PluginToUnity$ControlMessages valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void send(int) -> send
    void send() -> send
    void <clinit>() -> <clinit>
com.badran.library.CircularArrayList -> com.badran.library.a:
    int n -> h
    byte[] empty -> a
    int head -> i
    int tail -> j
    int lengthPacketsCounter -> k
    int counter -> l
    int packetSize -> a
    byte[] buf -> buf
    int mode$1464775a -> m
    java.util.LinkedList marks -> a
    byte endByte -> b
    void <init>(int) -> <init>
    int wrapIndex(int) -> a
    int size() -> size
    byte[] pollArray(int) -> b
    byte[] pollPacket(int) -> c
    void IntToBytes(byte[],int,int) -> a
com.badran.library.CircularArrayList$1 -> com.badran.library.b:
    int[] $SwitchMap$com$badran$library$CircularArrayList$MODES -> b
    void <clinit>() -> <clinit>
com.badran.library.CircularArrayList$MODES -> com.badran.library.c:
    int LENGTH_PACKET$1464775a -> n
    int END_BYTE_PACKET$1464775a -> o
    int NO_PACKETIZATION$1464775a -> p
    int[] $VALUES$1d3f537f -> c
    int[] values$e03aae0() -> a
    void <clinit>() -> <clinit>
